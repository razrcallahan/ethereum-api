{"version":3,"sources":["../../src/models/wallet.js"],"names":["Wallet","publicAddr","privateKey","publicAddress","address","getPublicAddress","Promise","resolve","reject","balance","web3","eth","getBalance","then","value","utils","fromWei","catch","message","destinationAddr","amount","gasPrice","gasLimit","sendTransaction","nonce","details","toHex","toBN","toWei","toString","transaction","EthereumTx","Buffer","sign","serializedTx","serialize","sendSignedTransaction","on","hash","console","log","getTransactionCount"],"mappings":";;;;;;qjBAAA;;;;;AAGA;;;;;;;;IAEqBA,M;AACjB,oBAAYC,UAAZ,EAAwBC,UAAxB,EAAoC;AAAA;;AAChC,aAAKC,aAAL,GAAqBF,UAArB;AACA,aAAKC,UAAL,GAAkBA,UAAlB;AAEH;;;;2CAEkB;AACf,mBAAO,KAAKC,aAAZ;AACH;;;wCAEe;AACZ,mBAAO,KAAKD,UAAZ;AACH;;;qCAEY;AACT,gBAAIE,UAAU,KAAKC,gBAAL,EAAd;AACA,mBAAO,IAAIC,OAAJ,CAAY,UAASC,OAAT,EAAkBC,MAAlB,EAAyB;;AAExC,oBAAIC,UAAUC,KAAKC,GAAL,CAASC,UAAT,CAAoBR,OAApB,CAAd;;AAEAK,wBAAQI,IAAR,CAAa,UAASC,KAAT,EAAgB;;AAEzBP,4BAAQG,KAAKK,KAAL,CAAWC,OAAX,CAAmBF,KAAnB,EAA0B,OAA1B,CAAR;AAEH,iBAJD,EAIGG,KAJH,CAIS,UAASC,OAAT,EAAiB;;AAEtBV,2BAAOU,OAAP;AACH,iBAPD;AAQH,aAZM,CAAP;AAaH;;;0CAEiBC,e,EAAiBC,M,EAAQC,Q,EAAUC,Q,EAAU;AAC3D,gBAAIC,kBAAkB,SAAlBA,eAAkB,CAASC,KAAT,EAAgB;AAClC,oBAAIC,UAAU;AACV,0BAAMN,eADI;AAEV,6BAAST,KAAKK,KAAL,CAAWW,KAAX,CAAkBhB,KAAKK,KAAL,CAAWY,IAAX,CAAgBjB,KAAKK,KAAL,CAAWa,KAAX,CAAiBR,MAAjB,EAAyB,OAAzB,CAAhB,EAAmDS,QAAnD,EAAlB,CAFC;AAGV,2BAAOR,QAHG;AAIV,gCAAYC,WAAW,UAJb,EAIyB;AACnC,6BAASE,KALC;AAMV,+BAAW,CAND,CAMG;AANH,iBAAd;;AASA,oBAAMM,cAAc,IAAIC,sBAAJ,CAAeN,OAAf,CAApB;AACA,oBAAIvB,aAAa,IAAI8B,MAAJ,CAAW,kEAAX,EAA+E,KAA/E,CAAjB;AACAF,4BAAYG,IAAZ,CAAiB/B,UAAjB;;AAEA,oBAAIgC,eAAeJ,YAAYK,SAAZ,EAAnB;AACAzB,qBAAKC,GAAL,CAASyB,qBAAT,CAA+B,OAAOF,aAAaL,QAAb,CAAsB,KAAtB,CAAtC,EACCQ,EADD,CACI,iBADJ,EACuB,UAASC,IAAT,EAAc;AAC7BC,4BAAQC,GAAR,CAAYF,IAAZ;AACH,iBAHL;AAIH,aAnBD;;AAqBA,gBAAId,QAAQd,KAAKC,GAAL,CAAS8B,mBAAT,CAA6B,4CAA7B,CAAZ;AACAjB,kBAAMX,IAAN,CAAW,UAASC,KAAT,EAAgB;AACvBS,gCAAgBT,KAAhB;AACH,aAFD,EAEGG,KAFH,CAES,UAASC,OAAT,EAAiB;AACtBqB,wBAAQC,GAAR,CAAYtB,OAAZ;AACH,aAJD;AAKH;;;;;;kBA5DgBlB,M","file":"wallet.js","sourcesContent":["/**\n * Created by wasimqamar on 01/05/18.\n */\nimport EthereumTx from 'ethereumjs-tx';\n\nexport default class Wallet {\n    constructor(publicAddr, privateKey) {\n        this.publicAddress = publicAddr;\n        this.privateKey = privateKey;\n\n    }\n\n    getPublicAddress() {\n        return this.publicAddress;\n    }\n\n    getPrivateKey() {\n        return this.privateKey;\n    }\n\n    getBalance() {\n        let address = this.getPublicAddress();\n        return new Promise(function(resolve, reject){\n\n            let balance = web3.eth.getBalance(address);\n\n            balance.then(function(value) {\n\n                resolve(web3.utils.fromWei(value, 'ether'));\n\n            }).catch(function(message){\n\n                reject(message);\n            });\n        });\n    }\n\n    createTransaction(destinationAddr, amount, gasPrice, gasLimit) {\n        let sendTransaction = function(nonce) {\n            let details = {\n                \"to\": destinationAddr,\n                \"value\": web3.utils.toHex( web3.utils.toBN(web3.utils.toWei(amount, 'ether')).toString() ),\n                \"gas\": gasPrice,\n                \"gasPrice\": gasLimit * 1000000000, // converts the gwei price to wei\n                \"nonce\": nonce,\n                \"chainId\": 4 // EIP 155 chainId - mainnet: 1, rinkeby: 4\n            }\n\n            const transaction = new EthereumTx(details);\n            var privateKey = new Buffer('afa66611fcd87fe2939f2dbace769512f14e7147288577c6f6735bb8aa955ce7', 'hex')\n            transaction.sign(privateKey);\n\n            let serializedTx = transaction.serialize();\n            web3.eth.sendSignedTransaction('0x' + serializedTx.toString('hex'))\n            .on('transactionHash', function(hash){\n                    console.log(hash);\n                });\n        }\n\n        let nonce = web3.eth.getTransactionCount(\"0x77A83849D1Ae0d56410fA102d0C26Cc06c559620\")\n        nonce.then(function(value) {\n            sendTransaction(value);\n        }).catch(function(message){\n            console.log(message);\n        });\n    }\n}\n"]}